27/01/25
Promise:
A promise is a special javascript object that represents the eventual completion (or failure)of an asynchronous operations.
1)three states
#pending : the initial state , the promise is still waiting for the operation to finish
#fulfilled:the operation completed successfully
#rejected: the operation failed

Exp:
To create a promise new promise();
The promise constructor takes a function with the two parameters resolve â€“to mark the promise is successful
Reject -to mark it as failed

Handling:
->.then() method is called when the promise is fulfilled.
it receives the result from the resolve();
>.catch() method is called when promise is rejected;
It receives the result from the reject();

Ex:
let myPromise = new Promise((reslove , reject)=>{
            let success = true
            if(success){
                reslove("the operation was successful")
            }else{
                reject("the operation failed")
            }
        });
        myPromise.then(result=>{
          console.log(result)
        })
        .catch(error=>{
           console.log(error)
        })

Chaining promises:
--you can have chain multiple . then()
Ex:
let promise= new Promise((resolve , reject)=>{
            resolve(5);
        })
        promise
        .then(result=>{
            document.write(result,"<br>")
            return result*2
        })
        .then(result=>{
            document.write(result,"<br>");
            return result+3;
        })
        .then(result=>{
            document.write(result,"<br>")
        })
        .catch(error=>{
            document.write("error" ,error)
        })
1)promise with setTimeOut
--using setTimeOut the promise will resolve after certain amount of time 3
Exp:
let myPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        let success = true
        if (success) {
            resolve("the operation was successful")
        } else {
            reject("the operation failed")
        }
    }, 3000)
});
myPromise.then(result => {
    console.log(result)
    document.write(result)
})
.catch(error => {
    console.log(error)
    document.write(error)
})
